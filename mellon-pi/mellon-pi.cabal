Name:                   mellon-pi
Version:                0.3.2
Cabal-Version:          >= 1.10
Build-Type:             Simple
Author:                 Drew Hess <src@drewhess.com>
Maintainer:             Drew Hess <src@drewhess.com>
Homepage:               https://github.com/dhess/mellon/
Bug-Reports:            https://github.com/dhess/mellon/issues/
Stability:              experimental
License:                BSD3
License-File:           LICENSE
Copyright:              Copyright (c) 2015, Drew Hess
Tested-With:            GHC == 7.10.1
Synopsis:               Run a mellon controller on a Raspberry Pi
Description:
  @mellon-pi@ mixes @mellon@ and @mellon-server@ together with Raspberry
  Pi/Raspberry Pi 2 GPIO to create a turnkey physical access controller.
  Simply connect a properly-designed physical access device (e.g., an
  electric strike driven by a relay circuit such as the one shown
  <http://www.petervis.com/Raspberry_PI/Driving_Relays_with_CMOS_and_TTL_Outputs/Driving_Relays_with_CMOS_and_TTL_Outputs.html here>)
  to an available GPIO pin on your RPi/RPi2, then run @mellon-pi@ with
  the specified GPIO pin number and port to provide a REST web service
  for your access device.
  .
  __NOTE__: the REST service provided by @mellon-pi@ offers no
  security/authentication for your access control device! You should
  always run @mellon-pi@ behind a secure proxy web service or
  equivalent HTTP(S)-based authentication mechanism.
  .
  @mellon-pi@ uses the <https://hackage.haskell.org/package/HPi HPi>
  Haskell package to interact directly with the Raspberry Pi/Raspberry
  Pi 2 BMC2835 SoC. As such, @mellon-pi@ will only function on an
  RPi/RPi2 device (or equivalent with a BCM2835 or BCM2835-compatible
  SoC).
  .
  However, the GPIO functionality required by @mellon-pi@ to drive the
  physical access device is quite simple: configure the GPIO pin for
  output, drive it high when the @mellon@ controller locks the device,
  and drive it low when the device is unlocked. Accordingly, it should
  be relatively easy to adapt the @mellon-pi@ source to drive a
  different, but equivalent, GPIO interface; e.g., the Linux
  @/sys/class/gpio@ interface could be used directly, as described in
  the <https://www.kernel.org/doc/Documentation/gpio/sysfs.txt Linux
  kernel documentation>.

Library
  Default-Language:     Haskell2010
  HS-Source-Dirs:       src
  GHC-Options:          -Wall
  Exposed-Modules:      Mellon.Pi
  Build-Depends:        base >= 4 && < 5
                      , mellon
                      , mellon-server
                      , network
                      , warp
                      , HPi

Executable mellon-pi
  Main-Is:              Main.hs
  Default-Language:     Haskell2010
  HS-Source-Dirs:       mellon-pi
                      , src
  GHC-Options:          -Wall
  Build-Depends:        base >= 4 && < 5
                      , mellon
                      , mellon-server
                      , network
                      , optparse-applicative
                      , warp
                      , HPi
  Other-Modules:        Mellon.Pi

Source-Repository head
  Type:                 git
  Location:             git://github.com/dhess/mellon.git
